package me.mykindos.betterpvp.core.loot;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import org.jetbrains.annotations.NotNull;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

/**
 * Represents a collection of loot entries that is generated by a {@link LootTable}
 * upon a {@link LootContext} request.
 * <p>
 * An instance of {@link LootBundle} is generated each time new loot is petitioned
 * by a {@link LootContext}.
 */
@AllArgsConstructor
public final class LootBundle implements Iterable<Loot<?, ?>> {

    /**
     * The context for which the loot bundle is being generated.
     */
    @Getter
    private final LootContext context;

    @Getter
    @Setter
    private AwardStrategy awardStrategy;

    /**
     * The list of loot entries.
     * <p>
     * This list is not guaranteed to be populated with any entries, as some loot tables
     * may not generate any loot.
     */
    private final @NotNull List<@NotNull Loot<?, ?>> loot;

    public @NotNull Collection<@NotNull Loot<?, ?>> getLoot() {
        return Collections.unmodifiableCollection(loot);
    }

    public int getSize() {
        return this.loot.size();
    }

    /**
     * Returns an iterator over elements of type {@code T}.
     *
     * @return an Iterator.
     */
    @Override
    public @NotNull Iterator<Loot<?, ?>> iterator() {
        return loot.iterator();
    }

    /**
     * Convenience method that awards the loot entries contained in this bundle to the context.
     * @see Loot#award(LootContext)
     * @see AwardStrategy#award(LootBundle)
     */
    public void award() {
        this.awardStrategy.award(this);
    }
}
